name: Create Production Releases
run-name: Create Production Releases
on:
    push:
        branches:
            - master

jobs:
    make-gelly-artifacts:
        runs-on: windows-latest
        env:
            SCCACHE_GHA_ENABLED: "on"
        strategy:
            matrix:
                presets: [
                    { configure: "gelly-gmod-relwithdebinfo", build: "Gelly-GMod-RelWithDebInfo" },
                    { configure: "gelly-gmod-release", build: "Gelly-GMod-Release" }
                ]
        steps:
            -   name: Checkout latest Gelly
                uses: actions/checkout@v3
                with:
                    submodules: false

            -   name: Cache Submodules
                id: cache-submodules
                uses: actions/cache@v4
                with:
                    path: 'packages/**/vendor/**'
                    key: gelly-submodules-${{ github.ref }}-${{ hashFiles('.gitmodules') }}

            -   name: Init all submodules if needed
                if: steps.cache-submodules.outputs.cache-hit != 'true'
                run: |
                    git submodule update --init --recursive

            -   name: Set up Ninja
                uses: seanmiddleditch/gha-setup-ninja@master

            -   name: Set up MSVC
                uses: ilammy/msvc-dev-cmd@v1
                with:
                    arch: amd64

            -   name: Set up NodeJS
                uses: actions/setup-node@v4
                with:
                    node-version: '20.1.0'

            -   name: Build the addon UI
                run: |
                    cd packages/addon-ui
                    npm install
                    npm run build:gmod

            -   name: Run sccache-cache
                uses: mozilla-actions/sccache-action@v0.0.8

            -   name: Download rcedit-x64
                run: |
                    Invoke-WebRequest "https://github.com/electron/rcedit/releases/download/v2.0.0/rcedit-x64.exe" -OutFile "rcedit-x64.exe"

            -   name: Perform build
                run: |
                    # We'll want cmake to know about rcedit so we'll just add the current working directory as a search root
                    cmake -DGELLY_PRODUCTION_BUILD=ON --fresh --preset ${{ matrix.presets.configure }} -S . -B bin/${{ matrix.presets.configure }} -DCMAKE_PROGRAM_PATH="$(Get-Location)"
                    cmake --build --target gelly-gmod --preset ${{ matrix.presets.build }}

            -   name: Add addon to release (no GMA)
                run: |
                    Copy-Item -Path "packages/addon/*" -Destination "release/garrysmod/addons/gelly" -Recurse -Force -Verbose

            -   name: Upload release
                uses: actions/upload-artifact@v4
                with:
                    name: ${{ matrix.presets.configure }}-x64
                    path: release
    make-release:
        runs-on: windows-latest
        needs: make-gelly-artifacts
        permissions:
            contents: write
        steps:
            -   name: Download artifacts
                uses: actions/download-artifact@v4
                with:
                    path: artifacts # When we don't specify a name, it'll download all artifacts we generated

            -   name: Zip artifacts
                run: |
                    Get-ChildItem -Path artifacts -Directory | ForEach-Object {
                        Compress-Archive -Path $_.FullName -DestinationPath "$($_.Name).zip"
                    }

            -   name: Get changelog
                uses: actions/checkout@v4
                with:
                    path: changelog
                    sparse-checkout: 'CHANGELOG.md'
                    sparse-checkout-cone-mode: false

            -   name: Parse changelog
                id: parse-changelog
                uses: mindsers/changelog-reader-action@v2
                with:
                    validation_level: warn
                    path: changelog/CHANGELOG.md

            -   name: Create release
                uses: softprops/action-gh-release@v2
                with:
                    files: |
                        *.zip
                    name: ${{ steps.parse-changelog.outputs.version }}
                    body: ${{ steps.parse-changelog.outputs.changes }}
                    tag_name: ${{ steps.parse-changelog.outputs.version }}